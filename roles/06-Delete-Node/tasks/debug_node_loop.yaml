---

# =============================================================================
#                            Удаление нод из кластера
# =============================================================================

- name: Блок на удаление нод из кластера (если их нет в inventory)
  become: true
  when:
    - item not in groups['k8s_masters']
    - item not in groups['k8s_workers']
  block:

    # =========================================================================
    #            Удаление ноды из кластера (и master нод и worker нод)
    # =========================================================================
    - name: (debug) Kubectl delete node {{ item }}
      ansible.builtin.debug:
        msg: "kubectl delete node {{ item }}"

    # - name: Kubectl delete node {{ item }}
    #   ansible.builtin.shell: |
    #     kubectl delete node "{{ item }}"
    #   register: kubectl_delete_node_output

    # - name: Вывод результатов kubectl delete node {{ item }}
    #   ansible.builtin.debug:
    #     var: kubectl_delete_node_output.stdout

    # =========================================================================
    #                     Удаление ноды из ETCD (только master)
    # =========================================================================
    - name: Block on Delete ETCD member {{ item }}
      when:
        - item in all_cpl_nodes
      block:

        - name: (debug) Delete ETCD member {{ item }}
          ansible.builtin.debug:
            msg: "inventory_hostname - {{ inventory_hostname }}, ansible_ssh_host - {{ ansible_ssh_host }}, item - {{ item }}"

        # - name: Получить ETCD memder для node {{ item }}
        #   changed_when: false
        #   ansible.builtin.shell: |
        #     kubectl -n kube-system exec etcd-{{ inventory_hostname }} -- etcdctl \
        #     --endpoints {{ ansible_ssh_host }}:2379 \
        #     --cacert /etc/kubernetes/pki/etcd/ca.crt \
        #     --key /etc/kubernetes/pki/etcd/server.key \
        #     --cert /etc/kubernetes/pki/etcd/server.crt \
        #     --write-out=simple \
        #     member list | grep {{ item }} | awk '{print $1}' | sed 's/.$//'
        #   register: deleted_etcd_member_id_output

        # - name: Переопределить переменную deleted_etcd_member_id
        #   ansible.builtin.set_fact:
        #     deleted_etcd_member_id: "{{ deleted_etcd_member_id_output.stdout }}"
        #   when:
        #     - deleted_etcd_member_id_output.stdout != ""

        # - name: Вывод ID удаляемого ETCD member для node {{ item }}
        #   ansible.builtin.debug:
        #     var: deleted_etcd_member_id
        #   when:
        #     - deleted_etcd_member_id is defined

        # - name: Удалить ETCD member для node {{ item }}
        #   ansible.builtin.shell: |
        #     kubectl -n kube-system exec etcd-{{ inventory_hostname }} -- etcdctl \
        #     --endpoints {{ ansible_ssh_host }}:2379 \
        #     --cacert /etc/kubernetes/pki/etcd/ca.crt \
        #     --key /etc/kubernetes/pki/etcd/server.key \
        #     --cert /etc/kubernetes/pki/etcd/server.crt \
        #     member remove {{ deleted_etcd_member_id }}
        #   register: delete_etcd_member_output
        #   when:
        #     - deleted_etcd_member_id is defined

        # - name: Вывод результата удаления ETCD member
        #   ansible.builtin.debug:
        #     var: delete_etcd_member_output.stdout
        #   when:
        #     - delete_etcd_member_output.stdout is defined
    # =========================================================================
    #                     Сброс ноды (и master нод и worker нод)
    # =========================================================================
    - name: (debug) Kubeadm reset node {{ item }}
      become: true
      delegate_to: "{{ item }}"
      remote_user: cloud-user
      ansible.builtin.shell: |
        hostname
      vars:
        ansible_python_interpreter: auto_silent
      register: hostname_output

    - name: Вывод результатов (debug) Kubeadm reset node {{ item }}
      ansible.builtin.debug:
        var: hostname_output.stdout

    # - name: Kubeadm reset
    #   become: true
    #   delegate_to: "{{ item }}"
    #   ansible.builtin.shell: |
    #     kubeadm reset --force
