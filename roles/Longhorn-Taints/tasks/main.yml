---
# tasks file for Longhorn-Taints

# ============================================== Ping ==============================================

- name: Ping
  become: true
  ansible.builtin.ping:

# =================================== Изменение настроек Longhorn ==================================

- name: Блок для изменений глобальных настроек Longhorn
  delegate_to: "{{ first_cpl_node }}"
  run_once: true
  block:

    # =================== Проверка состояния Longhorn ===================

    - name: (Проверка № 1. Перед изменением настроек) Подсчет количества подов Longhorn в состоянии не Running
      changed_when: false
      ansible.builtin.shell: |
        kubectl get pods -n longhorn-system --no-headers | grep -iv Running | wc -l
      register: count_longhorn_pods_not_running_step1

    - name: (Проверка № 1. Перед изменением настроек) Вывод количества подов Longhorn в состоянии не Running
      ansible.builtin.debug:
        var: count_longhorn_pods_not_running_step1.stdout

    - name: (Проверка № 1. Перед изменением настроек) Вывод сообщения о количестве подов Longhorn в состоянии не Running
      ignore_errors: true
      ansible.builtin.assert:
        that: count_longhorn_pods_not_running_step1.stdout|regex_search("{{ target_count }}")
        fail_msg: "Не все поды Longhorn в состоянии Running"
        success_msg: "Все поды Longhorn в состоянии Running"

    - name: (Проверка № 1. Перед изменением настроек) Проверка состояния подов Longhorn
      changed_when: false
      ansible.builtin.shell: |
        kubectl get pods -n longhorn-system
      register: longhorn_pods_step1

    - name: (Проверка № 1. Перед изменением настроек) Вывод состояния подов Longhorn
      ansible.builtin.debug:
        var: longhorn_pods_step1.stdout

    # == Завершение работы плейбука, если не все поды Longhorn Running ==

    - name: (Проверка № 1. Перед изменением настроек) Завершение выполнение плэйбука, если не все поды Longhorn в состоянии Running
      ansible.builtin.meta: end_play
      when:
        - count_longhorn_pods_not_running_step1.stdout != target_count

    # ====================== Проверка состояния PVC =====================

    - name: (Проверка № 1. Перед изменением настроек) Подсчет количества PVC в состоянии Attached
      changed_when: false
      ansible.builtin.shell: |
        kubectl get lhv -n longhorn-system --no-headers | grep attached | wc -l
      register: count_pvc_attached

    - name: (Проверка № 1. Перед изменением настроек) Вывод количества PVC в состоянии Attached
      ansible.builtin.debug:
        var: count_pvc_attached.stdout

    - name: (Проверка № 1. Перед изменением настроек) Вывод сообщения о количестве PVC в состоянии Attached
      ignore_errors: true
      ansible.builtin.assert:
        that: count_pvc_attached.stdout|regex_search("{{ target_count }}")
        fail_msg: "Остались PVC в статусе Attached"
        success_msg: "Не осталось PVC в статусе Attached"

    - name: (Проверка № 1. Перед изменением настроек) Завершение выполнение плэйбука, если остались PVC в состоянии Attached
      ansible.builtin.meta: end_play
      when:
        - count_pvc_attached.stdout != target_count

    # =============== Установка настройки Taint toleration ==============

#    # ===== Модулем k8s_json_patch =====
#
#    - name: Добавление настройки толерантности к "{{ taint }}" (Вариант с модулем kubernetes.core.k8s_json_patch)
#      kubernetes.core.k8s_json_patch:
#        kind: settings
#        namespace: "{{ longhorn_namespace }}"
#        name: taint-toleration
#        api_version: "{{ longhorn_api_version }}"
#        patch:
#          - op: replace
#            path: /value
#            value: "{{ taint }}"

    # ========= C помощью JSON =========

    - name: Создать папку для копирования в нее JSON
      ansible.builtin.file:
        path: "{{ longhorn_project_folder }}"
        state: directory
        owner: root
        group: root
        mode: "0775"

    - name: Скопировать Longhorn_NoSchedule_toleration_add.json в {{ longhorn_project_folder }}
      become: true
      ansible.builtin.copy:
        src: Longhorn_NoSchedule_toleration_add.json
        dest: "{{ longhorn_project_folder }}/Longhorn_NoSchedule_toleration_add.json"
        owner: root
        group: root
        mode: "0644"

    - name: Добавление настройки толерантности к NoSchedule (Вариант с json)
      ansible.builtin.shell: |
        kubectl patch lhs taint-toleration -n longhorn-system --type='json' \
        --patch-file {{ longhorn_project_folder }}/Longhorn_NoSchedule_toleration_add.json

    # ========== Проверка успешного перезапуска подов Longhorn ==========

    - name: (Проверка № 2. После изменения настроек) Подождать 5 секунд перед запуском проверки
      ansible.builtin.pause:
        seconds: 5

    - name: (Проверка № 2. После изменения настроек) Проверка в цикле, что все поды Longhorn в состоянии Running
      changed_when: false
      ignore_errors: true
      ansible.builtin.shell: |
        kubectl get pods -n longhorn-system --no-headers | grep -iv Running | wc -l
      register: count_longhorn_pods_not_running_step2
      until: count_longhorn_pods_not_running_step2.stdout == target_count
      retries: 60   # 60 раз максимум
      delay: 1      # с задержкой в 1 секунду

    - name: (Проверка № 2. После изменения настроек) Вывод сообщения о работоспособности подов Longhorn
      ignore_errors: true
      ansible.builtin.assert:
        that: count_longhorn_pods_not_running_step2.stdout|regex_search("{{ target_count }}")
        fail_msg: "Не все поды Longhorn в состоянии Running"
        success_msg: "Все поды Longhorn в состоянии Running"

    - name: (Проверка № 2. После изменения настроек) Проверка состояния подов Longhorn
      changed_when: false
      ansible.builtin.shell: |
        kubectl get pods -n longhorn-system
      register: longhorn_pods_step2

    - name: (Проверка № 2. После изменения настроек) Вывод состояния подов Longhorn
      ansible.builtin.debug:
        var: longhorn_pods_step2.stdout

    # == Завершение работы плейбука, если не все поды Longhorn Running ==

    - name: (Проверка № 2. После изменения настроек) Завершение выполнение плэйбука, если не все поды Longhorn в состоянии Running
      ansible.builtin.meta: end_play
      when:
        - count_longhorn_pods_not_running_step2.stdout != target_count

# =================================== Повесить taint на str ноды ===================================

#    # ======== Модулем k8s_taint =======
#
#- name: Повесить taint на ноду "{{ inventory_hostname }}"
#  delegate_to: "{{ first_cpl_node }}"
#  when:
#    - "'str' in inventory_hostname"
#  kubernetes.core.k8s_taint:
#    state: present
#    name: "{{ inventory_hostname }}"
#    taints:
#    - effect: NoSchedule
#      key: "key1"
#      value: "value1"

    # ======== С помощью команды =======

- name: Повесить taint на ноду "{{ inventory_hostname }}"
  delegate_to: "{{ first_cpl_node }}"
  when:
    - "'str' in inventory_hostname"
  ansible.builtin.shell: |
    kubectl taint nodes {{ inventory_hostname }} key1=value1:NoSchedule

- name: Перезагрузка str нод
  throttle: 1
  become: true
  when:
    - "'str' in inventory_hostname"
  ansible.builtin.reboot:

- name: Блок проверки работоспособности Longhorn после перезагрузки
  delegate_to: "{{ first_cpl_node }}"
  run_once: true
  block:

    # = Проверка успешного перезапуска подов Longhorn после перезагрузки =

    - name: (Проверка № 3. После перезагрузки str нод) Подождать 15 секунд перед запуском проверки подов Longhorn
      ansible.builtin.pause:
        seconds: 15

    - name: (Проверка № 3. После перезагрузки str нод) Проверка в цикле, что все поды Longhorn в состоянии Running
      changed_when: false
      ignore_errors: true
      ansible.builtin.shell: |
        kubectl get pods -n longhorn-system --no-headers | grep -iv Running | wc -l
      register: count_longhorn_pods_not_running_step3
      until: count_longhorn_pods_not_running_step3.stdout == target_count
      retries: 60   # 60 раз максимум
      delay: 1      # с задержкой в 1 секунду

    - name: (Проверка № 3. После перезагрузки str нод) Вывод сообщения о работоспособности подов Longhorn
      ignore_errors: true
      ansible.builtin.assert:
        that: count_longhorn_pods_not_running_step3.stdout|regex_search("{{ target_count }}")
        fail_msg: "После перезагрузки не все поды Longhorn в состоянии Running"
        success_msg: "После перезагрузки все поды Longhorn в состоянии Running"

    - name: (Проверка № 3. После перезагрузки str нод) Проверка состояния подов Longhorn
      changed_when: false
      ansible.builtin.shell: |
        kubectl get pods -n longhorn-system
      register: longhorn_pods_step3

    - name: (Проверка № 3. После перезагрузки str нод) Вывод состояния подов Longhorn
      ansible.builtin.debug:
        var: longhorn_pods_step3.stdout

    # == Завершение работы плейбука, если не все поды Longhorn Running ==

    - name: (Проверка № 3. После перезагрузки str нод) Завершение выполнение плэйбука, если не все поды Longhorn в состоянии Running
      ansible.builtin.meta: end_play
      when:
        - count_longhorn_pods_not_running_step3.stdout != target_count
