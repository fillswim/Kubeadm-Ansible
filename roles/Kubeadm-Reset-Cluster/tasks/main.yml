---
# tasks file for Reset-Kubeadm-Cluster

# =============================================================================
#                                Kubeadm reset ноды
# =============================================================================

- name: Kubeadm reset ноды
  ansible.builtin.shell: |
    kubeadm reset --force
  register: kubeadm_reset_output
  args:
    executable: /bin/bash

- name: Вывод результата kubeadm reset ноды
  ansible.builtin.debug:
    var: kubeadm_reset_output.stdout

# =============================================================================
#                            Delete images and containers
# =============================================================================

- name: Crictl rm
  ignore_errors: true
  ansible.builtin.shell: |
    crictl rm -f -a
  args:
    executable: /bin/bash

- name: Crictl rmi
  ignore_errors: true
  ansible.builtin.shell: |
    crictl rmi --all
  args:
    executable: /bin/bash

# =============================================================================
#                                  Stop services
# =============================================================================

- name: Stop services
  become: true
  ignore_errors: true
  ansible.builtin.systemd_service:
    name: "{{ item_service }}"
    state: stopped
    enabled: false
    daemon_reload: true
  loop:
    - containerd
    - kubelet
    - iscsi
  loop_control:
    loop_var: item_service

- name: Stop services (haproxy and keepalived)
  become: true
  when:
    - inventory_hostname == groups['k8s_masters']
  ansible.builtin.systemd_service:
    name: "{{ item_service_master }}"
    state: stopped
    enabled: false
    daemon_reload: true
  loop:
    - haproxy
    - keepalived
  loop_control:
    loop_var: item_service_master

# =============================================================================
#                            Delete files and folders
# =============================================================================

- name: Удалить папок и файлов
  ansible.builtin.file:
    path: "{{ item_path }}"
    state: absent
  loop:
    - /root/download
    - /etc/kubernetes
    - /etc/containerd
    - /usr/local/lib/systemd/system/containerd.service
    - /usr/local/sbin/runc
    - /opt/cni/bin
    - /etc/keepalived/keepalived.conf
    - /etc/haproxy/haproxy.cfg
    - /root/kubeadm
    - /root/.kube
    - /var/lib/etcd
    - /usr/local/bin/containerd
    - /usr/local/bin/containerd-shim
    - /usr/local/bin/containerd-shim-runc-v1
    - /usr/local/bin/containerd-shim-runc-v2
    - /usr/local/bin/containerd-stress
    - /usr/local/bin/ctr
  loop_control:
    loop_var: item_path

# =============================================================================
#                                 Delete packages
# =============================================================================

- name: Удаление пакетов на ноде (RedHat)
  when:
    - ansible_os_family == "RedHat" or ansible_os_family == "RED"
  ansible.builtin.package:
    name:
      - kubeadm
      - kubelet
      - kubectl
      - keepalived
      - haproxy
    state: absent

- name: Удаление пакетов на ноде (Ubuntu)
  when:
    - ansible_os_family == "Ubuntu"
  ansible.builtin.apt:
    name:
      - kubeadm
      - kubelet
      - kubectl
      - keepalived
      - haproxy
    state: absent

- name: Удаление пакетов на ноде (Altlinux)
  when:
    - ansible_os_family == "Altlinux"
  community.general.apt_rpm:
    pkg:
      - "kubernetes{{ kubernetes_major_version }}-kubeadm"
      - "kubernetes{{ kubernetes_major_version }}-kubelet"
      # - "kubernetes{{ kubernetes_major_version }}-common"
      # - "kubernetes{{ kubernetes_major_version }}-master"
      # - "kubernetes{{ kubernetes_major_version }}-client"
      # - "kubernetes{{ kubernetes_major_version }}-node"
      - "kubernetes{{ kubernetes_major_version }}-crio"
      - "cri-tools{{ kubernetes_major_version }}"
      - "keepalived"
      - "haproxy"
    state: absent

# =============================================================================
#                                      Reboot
# =============================================================================

- name: Reboot
  throttle: 1
  become: true
  ansible.builtin.reboot:
